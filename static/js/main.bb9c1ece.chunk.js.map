{"version":3,"sources":["Cmps/Common/Modal/Modal.module.css","Cmps/Header/Header.module.css","Cmps/Content/Content.module.css","redux/selectors/addition-selectors.js","redux/addition-reducer.ts","redux/tasks-reducer.ts","Cmps/Header/Header.tsx","redux/selectors/tasks-selectors.js","Cmps/Content/task/Task.tsx","Cmps/Common/Modal/Modal.tsx","Cmps/Content/Content.tsx","App.tsx","serviceWorker.ts","redux/redux-store.ts","utils/localStorage.js","index.tsx","Cmps/Content/task/Task.module.css"],"names":["module","exports","selectFieldText","state","additionReducer","fieldText","SET_FIELD_TEXT","base","initialState","updateFieldText","text","dispatch","a","type","payload","action","ADD_TASK","UPDATE_TASK","DELETE_TASK","tasks","updateTask","task","removeTask","id","tasksReducer","map","filter","compose","connect","createTask","getState","Math","random","toString","substr","name","spentTime","lastStartTime","round","Date","getTime","className","style","header","inp","value","onChange","event","target","btn","onClick","icon","faPlus","selectTasks","Task","interval","this","setInterval","props","forceUpdate","clearInterval","remove","stop","start","timeAndBtns","time","delta","days","floor","hours","minutes","seconds","showTime","faStop","faPlay","faTrash","React","Component","Modal","answer","modBack","modal","faCheck","faTimes","Content","showModal","removeID","setState","removeConfirmedByModal","yesOrNo","deleteTask","content","key","startTask","stopTask","i","length","App","document","title","Boolean","window","location","hostname","match","reducers","combineReducers","preloadedState","serializedState","localStorage","getItem","JSON","parse","e","loadState","composeEnhancers","store","createStore","applyMiddleware","thunkMiddleware","subscribe","setItem","stringify","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bb9c1ece.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Modal_btn__bKKtw\",\"modal\":\"Modal_modal__1UQln\",\"modBack\":\"Modal_modBack__3lweq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3NlgG\",\"inp\":\"Header_inp__18Rgt\",\"btn\":\"Header_btn__3vPiX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Content_content__3mCMQ\"};","export const selectFieldText = state=>state.additionReducer.fieldText;\nexport const selectActiveTasksExist = state=>state.additionReducer.activeTasksExist;","import {GlobalStateType} from \"./redux-store\"\nimport {ThunkAction} from 'redux-thunk'\n\nconst base = 'task/addition/';\n\nconst SET_FIELD_TEXT = base+'SET_FIELD_TEXT';\n\nconst initialState = {\n    fieldText: ''\n}\ntype InitialStateOfAdditionReducerType = typeof initialState\n\nconst additionReducer = (state: InitialStateOfAdditionReducerType=initialState, action: ActionsTypes) : InitialStateOfAdditionReducerType => {\n    switch (action.type) {\n        case SET_FIELD_TEXT:\n            {\n            return {...state, ...action.payload}\n        }\n        default:\n            return state;\n    }\n}\n\ntype SetFieldTextActionType = {\n    type: typeof SET_FIELD_TEXT\n    payload: {\n        fieldText: string\n    }\n}\n\ntype ActionsTypes = SetFieldTextActionType\ntype ThunkType = ThunkAction<Promise<void>, GlobalStateType, unknown, ActionsTypes>\n\ntype setFieldTextActionType = {type: typeof SET_FIELD_TEXT, payload: {fieldText: string}}\nexport const setFieldText = (fieldText: string) : setFieldTextActionType => ({type: SET_FIELD_TEXT, payload: {fieldText}});\n\nexport const updateFieldText = (text: string) : ThunkType => async (dispatch) => {\n    dispatch(setFieldText(text));\n}\n\nexport default additionReducer;","import {updateFieldText} from \"./addition-reducer\"\nimport {ThunkAction} from 'redux-thunk'\nimport {GlobalStateType} from \"./redux-store\";\n\nconst base = 'task/tasks/'\n\nconst ADD_TASK = base+'ADD_TASK'\nconst UPDATE_TASK = base+'UPDATE_TASK'\nconst DELETE_TASK = base+'DELETE_TASK'\n\nexport type TaskType = {\n    id: string\n    name: string\n    spentTime: number\n    lastStartTime: number | boolean\n}\n\nconst initialState = {\n    tasks: [] as Array<TaskType>\n}\n\ntype InitialStateType = typeof initialState\n\nconst tasksReducer = (state :InitialStateType=initialState, action: ActionsTypes) : InitialStateType => {\n    switch (action.type) {\n        case ADD_TASK: {\n            return {...state, tasks: [action.task, ...state.tasks]}\n        }\n        case UPDATE_TASK: {\n            return {tasks: state.tasks.map(task=>{\n                if (task.id===action.task.id) return action.task;\n                else return task;\n            })}\n        }\n        case DELETE_TASK: {\n            return {tasks: state.tasks.filter(task=>task.id!==action.id)}\n        }\n        default:\n            return state;\n    }\n}\n\ntype ActionWithTaskType = {\n    task: TaskType\n}\ntype AddTaskActionType = ActionWithTaskType & {\n    type: typeof ADD_TASK\n}\ntype UpdateTaskActionType = ActionWithTaskType & {\n    type: typeof UPDATE_TASK\n}\ntype RemoveTaskActionType = {\n    type: typeof DELETE_TASK\n    id: string\n}\ntype ActionsTypes =  AddTaskActionType & UpdateTaskActionType & RemoveTaskActionType\ntype ThunkActionsTypes =  AddTaskActionType | UpdateTaskActionType | RemoveTaskActionType\n\nexport const addTask = (task: TaskType) : AddTaskActionType => ({type: ADD_TASK, task});\nexport const updateTask = (task: TaskType) : UpdateTaskActionType => ({type: UPDATE_TASK, task});\nexport const removeTask = (id: string) : RemoveTaskActionType => ({type: DELETE_TASK, id});\ntype ThunkType = ThunkAction<Promise<void>, GlobalStateType, unknown, ThunkActionsTypes>\n\nexport const createTask = () : ThunkType => async (dispatch, getState)  => {\n    dispatch(addTask({\n        id: Math.random().toString(36).substr(2, 9),\n        name: getState().additionReducer.fieldText,\n        spentTime: 0,\n        lastStartTime: Math.round(new Date().getTime() / 1000)\n    }));\n    dispatch(updateFieldText(''));\n}\n\nexport const startTask = (id: string) : ThunkType => async (dispatch, getState) => {\n    let tasks = getState().tasksReducer.tasks;\n    for(let i=0; i<tasks.length; i++) {\n        if (tasks[i].id === id) {\n            tasks[i].lastStartTime = Math.round(new Date().getTime() / 1000)\n            dispatch(updateTask(tasks[i]))\n            break\n        }\n    }\n}\n\nexport const stopTask = (id: string) : ThunkType => async (dispatch, getState) => {\n    let tasks = getState().tasksReducer.tasks;\n    let task : TaskType | boolean =false\n    for(let i=0; i<tasks.length; i++) {\n        if (tasks[i].id === id) task = tasks[i]\n    }\n    if (task && task.lastStartTime!==false) {\n        task.spentTime += Math.round(new Date().getTime() / 1000) - +task.lastStartTime\n        task.lastStartTime = false\n        dispatch(updateTask(task))\n    }\n}\n\nexport const deleteTask = (id: string) : ThunkType => async (dispatch)  => {\n    dispatch(removeTask(id))\n}\n\nexport default tasksReducer;","import React from \"react\";\nimport style from './Header.module.css'\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {selectFieldText} from \"../../redux/selectors/addition-selectors\";\nimport {updateFieldText} from \"../../redux/addition-reducer\";\nimport {createTask} from \"../../redux/tasks-reducer\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\nimport {GlobalStateType} from \"../../redux/redux-store\";\n\ntype MapStateToPropsType = {\n    fieldText: string\n}\ntype MapDispatchToPropsType = {\n    createTask: ()=> void\n    updateFieldText: (text: string) => void\n}\n\ntype OwnPropsType = {}\n\ntype PropsType = MapDispatchToPropsType & MapStateToPropsType\n\nconst Header: React.FC<PropsType> = ({createTask, fieldText, updateFieldText})=>{\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>)=> {\n        updateFieldText(event.target.value);\n    }\n\n    return <nav className={style.header}>\n        <input className={style.inp} value={fieldText} onChange={handleChange}/>\n        <button className={style.btn+' customBtn'} onClick={()=>{createTask()}}><FontAwesomeIcon icon={faPlus}/></button>\n    </nav>\n}\n\n\nconst mapStateToProps = (state: GlobalStateType) : MapStateToPropsType => ({\n    fieldText: selectFieldText(state)\n});\n\n\nexport default compose(\n    connect<MapStateToPropsType,\n        MapDispatchToPropsType,\n        OwnPropsType,\n        GlobalStateType>\n    (mapStateToProps, {createTask, updateFieldText}))(Header);","export const selectTasks = state=>state.tasksReducer.tasks;","import React from \"react\";\nimport style from './Task.module.css'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\nimport { faPlay } from '@fortawesome/free-solid-svg-icons'\nimport { faStop } from '@fortawesome/free-solid-svg-icons'\nimport {TaskType} from \"../../../redux/tasks-reducer\";\n\ntype PropsType= {\n    task: TaskType\n\n    remove: (id: string)=>void\n    stop: (id: string)=>void\n    start: (id: string)=>void\n}\n\nclass Task extends React.Component<PropsType> {\n    interval: any\n\n    componentDidMount() {\n       this.interval = setInterval(()=>{if(this.props.task.lastStartTime!==false)this.forceUpdate()}, 1000)\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval)\n    }\n\n    render() {\n        let {task, remove, stop, start} = this.props\n\n        const showTime = () => {\n            let delta = task.spentTime\n            if (typeof task.lastStartTime==='number')\n                delta += Math.round((new Date).getTime() / 1000) - task.lastStartTime\n            let days = Math.floor(delta / 86400);\n            delta -= days * 86400;\n            let hours = Math.floor(delta / 3600) % 24;\n            delta -= hours * 3600;\n            let minutes = Math.floor(delta / 60) % 60;\n            delta -= minutes * 60;\n            let seconds = delta % 60;\n\n            return `${days} day ${hours}:${minutes}:${seconds}`\n        }\n\n        return <div className={style.task}>\n            <div>\n                <span className={style.name}>{task.name ? task.name : '-'}</span>\n            </div>\n            <div className={style.timeAndBtns}>\n                <span className={style.time}>{showTime()}</span>\n                {task.lastStartTime\n                    ? <button className={`customBtn ${style.btn}`} onClick={() => {stop(task.id)}}><FontAwesomeIcon icon={faStop}/></button>\n                    : <button className={`customBtn ${style.btn}`} onClick={() => {start(task.id)}}><FontAwesomeIcon icon={faPlay}/></button>\n                }\n                <button className={`customBtn ${style.btn}`} onClick={() => {remove(task.id)}}><FontAwesomeIcon icon={faTrash}/></button>\n            </div>\n        </div>\n    }\n}\n\nexport default Task;","import React from \"react\"\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCheck } from '@fortawesome/free-solid-svg-icons'\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\nimport style from \"./Modal.module.css\";\n\ntype PropsType = {answer: (bool:boolean)=>void}\n\nconst Modal: React.FC<PropsType> =  ({answer})=>{\n    return <div className={style.modBack}>\n        <div className={style.modal}>\n            Are you sure ?\n            <button className={`customBtn ${style.btn}`} onClick={()=>{answer(true)}}><FontAwesomeIcon icon={faCheck} /></button>\n            <button className={`customBtn ${style.btn}`} onClick={()=>{answer(false)}}><FontAwesomeIcon icon={faTimes} /></button>\n        </div>\n    </div>\n}\n\nexport default Modal","import React from \"react\";\nimport style from './Content.module.css'\nimport {compose} from 'redux';\nimport {connect} from \"react-redux\";\nimport {selectTasks} from \"../../redux/selectors/tasks-selectors\";\nimport Task from \"./task/Task\";\nimport {deleteTask, startTask, stopTask, TaskType} from \"../../redux/tasks-reducer\";\nimport Modal from \"../Common/Modal/Modal\";\nimport {GlobalStateType} from \"../../redux/redux-store\";\n\ntype MapStateToPropsType = {\n    tasks: Array<TaskType>\n}\ntype MapDispatchToPropsType = {\n    deleteTask: (id: string)=>void\n    startTask: (id: string)=>void\n    stopTask: (id: string)=>void\n}\n\ntype OwnPropsType = {}\n\ntype PropsType = MapDispatchToPropsType & MapStateToPropsType\n\n\ntype StateType = {\n    showModal: boolean\n    removeID: boolean | string\n}\n\n\nclass Content extends React.Component<PropsType, StateType> {\n    state = {\n        showModal: false,\n        removeID: false\n    }\n\n    componentDidMount() {\n\n    }\n\n    remove = (id: string | boolean) => {\n        this.setState({\n            showModal: true,\n            removeID: id\n        })\n    }\n\n    removeConfirmedByModal = (yesOrNo: boolean)=> {\n        this.setState({showModal: false})\n        if (typeof this.state.removeID === \"string\")\n            if (yesOrNo) this.props.deleteTask(this.state.removeID)\n    }\n\n    render() {\n        return <div className={style.content}>\n            {this.props.tasks.map((task: TaskType)=><Task key={task.id} task={task} start={this.props.startTask} stop={this.props.stopTask} remove={this.remove} /> )}\n            {this.state.showModal && <Modal answer={this.removeConfirmedByModal}/>}\n        </div>\n    }\n}\n\nconst mapStateToProps = (state: GlobalStateType) : MapStateToPropsType =>({\n    tasks: selectTasks(state)\n});\n\nexport default compose(\n    connect<MapStateToPropsType,\n        MapDispatchToPropsType,\n        OwnPropsType,\n        GlobalStateType>(mapStateToProps, {startTask, stopTask, deleteTask})\n)(Content);\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from \"./Cmps/Header/Header\";\nimport Content from \"./Cmps/Content/Content\";\n\nconst App: React.FC<{}> = ({}) => {\n    document.title = 'Todo list App'\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Content/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n        process.env.PUBLIC_URL,\n        window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                    'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n            response.status === 404 ||\n            (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n            'No internet connection found. App is running in offline mode.'\n        );\n      });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n  }\n}\n","import {combineReducers, createStore, applyMiddleware, compose} from \"redux\";\nimport thunkMiddleware from 'redux-thunk';\nimport tasksReducer from \"./tasks-reducer\";\nimport additionReducer from \"./addition-reducer\";\nimport {loadState, saveState} from \"../utils/localStorage\";\n\nlet reducers = combineReducers({\n    tasksReducer,\n    additionReducer\n});\n\ntype mainReducerType = typeof reducers\nexport type GlobalStateType = ReturnType<mainReducerType>\n\nconst preloadedState = loadState()\nconst composeEnhancers = (window as any)['__REDUX_DEVTOOLS_EXTENSION_COMPOSE__'] as typeof compose || compose\nconst store = createStore(reducers, preloadedState,  composeEnhancers(applyMiddleware(thunkMiddleware)));\nstore.subscribe(()=>{\n    saveState(store.getState())\n})\n\nexport default store;","export const loadState = () => {\n    try {\n        const serializedState = localStorage.getItem('state')\n        if (serializedState === null) return  undefined\n        else return JSON.parse(serializedState)\n    } catch (e) {\n        return undefined\n    }\n}\n\nexport const saveState = (state) => localStorage.setItem('state', JSON.stringify(state))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/redux-store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"Task_task__2gY3E\",\"name\":\"Task_name__1TFOq\",\"timeAndBtns\":\"Task_timeAndBtns__1CjOj\",\"time\":\"Task_time__1uBZu\",\"btn\":\"Task_btn__2tgG7\"};"],"sourceRoot":""}